---
default_install_hook_types: [pre-commit, pre-push]
default_stages: [pre-commit, manual]
minimum_pre_commit_version: 3.5.0
fail_fast: true
repos:
  - repo: local
    # this hook is not intended to be run on github
    # it just allows to generate the same pre-commit
    # file with some specific option to github
    hooks:
      - id: preCommitGeneration
        name: preCommitGeneration
        entry: .github/preCommitGeneration.sh
        language: system
        pass_filenames: false
        always_run: true
        require_serial: true
        stages: [pre-commit, pre-push, manual]

  - repo: https://github.com/executablebooks/mdformat
    # Do this before other tools "fixing" the line endings
    rev: 0.7.22
    hooks:
      - id: mdformat
        name: Format Markdown
        entry: mdformat # Executable to run, with fixed options
        language: python
        types: [markdown]
        args: [--wrap, "80", --number]
        additional_dependencies:
          - mdformat-toc
          - mdformat-shfmt
          - mdformat-tables
          - mdformat-config
          - mdformat-web
          - mdformat-gfm
        exclude: |
          (?x)(
            ^\.github/instructions/.*\.md$
          )

  - repo: https://github.com/pre-commit/pre-commit-hooks
    rev: v5.0.0
    hooks:
      - id: mixed-line-ending
      - id: end-of-file-fixer
        exclude: |
          (?x)(
            testsData/
          )
      - id: check-executables-have-shebangs
      - id: check-shebang-scripts-are-executable
      - id: check-xml
      - id: check-merge-conflict
      - id: detect-private-key
      - id: fix-byte-order-marker
      - id: check-yaml
      - id: trailing-whitespace
        exclude: |
          (?x)(
            testsData/
          )
        stages: [pre-commit, pre-push, manual]
      - id: check-added-large-files
      - id: forbid-new-submodules
      - id: mixed-line-ending
        args: [--fix=lf]
      - id: file-contents-sorter
        files: .cspell/.*\.txt
        args: [--ignore-case]
        stages: [pre-commit, pre-push, manual]
      - id: check-json
        # x modifier: extended. Spaces and text after a # in the pattern are ignored
        exclude: |
          (?x)(
            ^.vscode\/.*\.json$
          )

  - repo: https://github.com/rhysd/actionlint
    rev: v1.7.7
    hooks:
      - id: actionlint
        stages: [pre-commit, pre-push, manual]

  - repo: https://github.com/codespell-project/codespell
    rev: v2.4.1
    hooks:
      - id: codespell
        args:
          - --dictionary
          - "-"
          - --dictionary
          - .cspell/codespellrc-dic.txt
          - --ignore-words
          - .cspell/codespellrc-ignore.txt
          - --quiet-level
          - "2"
          - --interactive
          - "0"
          - --check-filenames
          - --check-hidden
          - --write-changes
        exclude: >
          (?x)(
              ^.cspell/codespellrc-.*.txt$|
              ^pkg/utils/encoding/testsData/content.txt$
          )

  - repo: https://github.com/ComPWA/prettier-pre-commit
    rev: v3.4.2
    hooks:
      - id: prettier
        args: [--cache, --ignore-unknown]
        stages: [pre-commit]
        exclude: |
          (?x)(
            \.md$|
            ^\.vscode/.*\.code-snippets$
          )

  - repo: https://github.com/fchastanet/jumanjihouse-pre-commit-hooks
    rev: 3.0.2
    hooks:
      - id: shfmt
        args: [-i, "2", -ci]
        # x modifier: extended. Spaces and text after a # in the pattern are ignored
        exclude: |
          (?x)(
            /testsData/
          )

      # Check both committed and uncommitted files for git conflict
      # markers and whitespace errors according to core.whitespace
      # and conflict-marker-size configuration in a git repo.
      - id: git-check
        # x modifier: extended. Spaces and text after a # in the pattern are ignored
        exclude: |
          (?x)(
            /testsData/
          )

  - repo: https://github.com/streetsidesoftware/cspell-cli
    rev: v9.0.1
    hooks:
      - id: cspell
        stages: [pre-push, manual]

  - repo: https://github.com/golangci/golangci-lint
    rev: v2.2.1
    hooks:
      - id: golangci-lint-config-verify
      - id: golangci-lint-full

  - repo: https://github.com/tekwizely/pre-commit-golang
    rev: v1.0.0-rc.1
    hooks:
      - id: go-build-repo-mod
      - id: go-mod-tidy-repo
      - id: go-test-mod
      - id: go-vet-repo-mod
      - id: go-fmt-repo
        args: [-w]
      - id: go-imports-repo
        args: [-w]
      - id: go-fumpt-repo
        args: [-w]
      - id: go-revive-repo-mod
      - id: go-sec-repo-mod
        stages: [manual]
      - id: go-staticcheck-repo-mod
        stages: [pre-push, manual]
      - id: go-critic
        stages: [pre-push, manual]

  - repo: local
    hooks:
      - id: go-structs-betteralign
        stages: [pre-push, manual]
        name: go-structs-betteralign
        entry: betteralign
        args:
          - -apply
          - -c
          - "5"
          - -fix
          - ./...
        language: system
        pass_filenames: false
        always_run: true

      - id: detect-dead-code
        stages: [pre-push, manual]
        name: Detect Dead Code
        entry: .build/detect-dead-code.sh
        language: system
        pass_filenames: false
        always_run: true

  - repo: https://github.com/fchastanet/bash-tools-framework
    rev: 6.2.2
    hooks:
      - id: awkLint
      - id: shellcheckLint
      - id: shellcheckLintGithubAction
      - id: plantuml
        args: [--same-dir, -f, png, -f, svg, --limit-size, "8290"]
